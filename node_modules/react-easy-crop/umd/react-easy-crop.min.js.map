{"version":3,"file":"react-easy-crop.min.js","sources":["../../src/helpers.ts","../../src/Cropper.tsx"],"sourcesContent":["import { Area, MediaSize, Point, Size } from './types'\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotation\n */\nexport function getCropSize(\n  mediaWidth: number,\n  mediaHeight: number,\n  containerWidth: number,\n  containerHeight: number,\n  aspect: number,\n  rotation = 0\n): Size {\n  const { width, height } = rotateSize(mediaWidth, mediaHeight, rotation)\n  const fittingWidth = Math.min(width, containerWidth)\n  const fittingHeight = Math.min(height, containerHeight)\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight,\n    }\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect,\n  }\n}\n\n/**\n * Compute media zoom.\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\n */\nexport function getMediaZoom(mediaSize: MediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height\n    ? mediaSize.width / mediaSize.naturalWidth\n    : mediaSize.height / mediaSize.naturalHeight\n}\n\n/**\n * Ensure a new media position stays in the crop area.\n */\nexport function restrictPosition(\n  position: Point,\n  mediaSize: Size,\n  cropSize: Size,\n  zoom: number,\n  rotation = 0\n): Point {\n  const { width, height } = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom),\n  }\n}\n\nfunction restrictPositionCoord(\n  position: number,\n  mediaSize: number,\n  cropSize: number,\n  zoom: number\n): number {\n  const maxPosition = (mediaSize * zoom) / 2 - cropSize / 2\n\n  return clamp(position, -maxPosition, maxPosition)\n}\n\nexport function getDistanceBetweenPoints(pointA: Point, pointB: Point) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2))\n}\n\nexport function getRotationBetweenPoints(pointA: Point, pointB: Point) {\n  return (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI\n}\n\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n */\nexport function computeCroppedArea(\n  crop: Point,\n  mediaSize: MediaSize,\n  cropSize: Size,\n  aspect: number,\n  zoom: number,\n  rotation = 0,\n  restrictPosition = true\n): { croppedAreaPercentages: Area; croppedAreaPixels: Area } {\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  const limitAreaFn = restrictPosition ? limitArea : noOp\n\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  // calculate the crop area in percentages\n  // in the rotated space\n  const croppedAreaPercentages = {\n    x: limitAreaFn(\n      100,\n      (((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width) *\n        100\n    ),\n    y: limitAreaFn(\n      100,\n      (((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) /\n        mediaBBoxSize.height) *\n        100\n    ),\n    width: limitAreaFn(100, ((cropSize.width / mediaBBoxSize.width) * 100) / zoom),\n    height: limitAreaFn(100, ((cropSize.height / mediaBBoxSize.height) * 100) / zoom),\n  }\n\n  // we compute the pixels size naively\n  const widthInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.width,\n      (croppedAreaPercentages.width * mediaNaturalBBoxSize.width) / 100\n    )\n  )\n  const heightInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.height,\n      (croppedAreaPercentages.height * mediaNaturalBBoxSize.height) / 100\n    )\n  )\n  const isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect\n\n  // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n  const sizePixels = isImgWiderThanHigh\n    ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels,\n      }\n    : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect),\n      }\n\n  const croppedAreaPixels = {\n    ...sizePixels,\n    x: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.width - sizePixels.width,\n        (croppedAreaPercentages.x * mediaNaturalBBoxSize.width) / 100\n      )\n    ),\n    y: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.height - sizePixels.height,\n        (croppedAreaPercentages.y * mediaNaturalBBoxSize.height) / 100\n      )\n    ),\n  }\n\n  return { croppedAreaPercentages, croppedAreaPixels }\n}\n\n/**\n * Ensure the returned value is between 0 and max\n */\nfunction limitArea(max: number, value: number): number {\n  return Math.min(max, Math.max(0, value))\n}\n\nfunction noOp(_max: number, value: number) {\n  return value\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPercentages.\n */\nexport function getInitialCropFromCroppedAreaPercentages(\n  croppedAreaPercentages: Area,\n  mediaSize: MediaSize,\n  rotation: number,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n) {\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  // This is the inverse process of computeCroppedArea\n  const zoom = clamp(\n    (cropSize.width / mediaBBoxSize.width) * (100 / croppedAreaPercentages.width),\n    minZoom,\n    maxZoom\n  )\n\n  const crop = {\n    x:\n      (zoom * mediaBBoxSize.width) / 2 -\n      cropSize.width / 2 -\n      mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y:\n      (zoom * mediaBBoxSize.height) / 2 -\n      cropSize.height / 2 -\n      mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100),\n  }\n\n  return { crop, zoom }\n}\n\n/**\n * Compute zoom from the croppedAreaPixels\n */\nfunction getZoomFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize: Size\n): number {\n  const mediaZoom = getMediaZoom(mediaSize)\n\n  return cropSize.height > cropSize.width\n    ? cropSize.height / (croppedAreaPixels.height * mediaZoom)\n    : cropSize.width / (croppedAreaPixels.width * mediaZoom)\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPixels\n */\nexport function getInitialCropFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  rotation = 0,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n): { crop: Point; zoom: number } {\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  const zoom = clamp(\n    getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize),\n    minZoom,\n    maxZoom\n  )\n\n  const cropZoom =\n    cropSize.height > cropSize.width\n      ? cropSize.height / croppedAreaPixels.height\n      : cropSize.width / croppedAreaPixels.width\n\n  const crop = {\n    x:\n      ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y:\n      ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) *\n      cropZoom,\n  }\n  return { crop, zoom }\n}\n\n/**\n * Return the point that is the center of point a and b\n */\nexport function getCenter(a: Point, b: Point): Point {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2,\n  }\n}\n\nexport function getRadianAngle(degreeValue: number) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width: number, height: number, rotation: number): Size {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * Clamp value between min and max\n */\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Combine multiple class names into a single string.\n */\nexport function classNames(...args: (boolean | string | number | undefined | void | null)[]) {\n  return args\n    .filter((value) => {\n      if (typeof value === 'string' && value.length > 0) {\n        return true\n      }\n\n      return false\n    })\n    .join(' ')\n    .trim()\n}\n","import React from 'react'\nimport normalizeWheel from 'normalize-wheel'\nimport { Area, MediaSize, Point, Size, VideoSrc } from './types'\nimport {\n  getCropSize,\n  restrictPosition,\n  getDistanceBetweenPoints,\n  getRotationBetweenPoints,\n  computeCroppedArea,\n  getCenter,\n  getInitialCropFromCroppedAreaPixels,\n  getInitialCropFromCroppedAreaPercentages,\n  classNames,\n  clamp,\n} from './helpers'\nimport cssStyles from './styles.css'\n\nexport type CropperProps = {\n  image?: string\n  video?: string | VideoSrc[]\n  transform?: string\n  crop: Point\n  zoom: number\n  rotation: number\n  aspect: number\n  minZoom: number\n  maxZoom: number\n  cropShape: 'rect' | 'round'\n  cropSize?: Size\n  objectFit?: 'contain' | 'horizontal-cover' | 'vertical-cover' | 'auto-cover'\n  showGrid?: boolean\n  zoomSpeed: number\n  zoomWithScroll?: boolean\n  onCropChange: (location: Point) => void\n  onZoomChange?: (zoom: number) => void\n  onRotationChange?: (rotation: number) => void\n  onCropComplete?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropAreaChange?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropSizeChange?: (cropSize: Size) => void\n  onInteractionStart?: () => void\n  onInteractionEnd?: () => void\n  onMediaLoaded?: (mediaSize: MediaSize) => void\n  style: {\n    containerStyle?: React.CSSProperties\n    mediaStyle?: React.CSSProperties\n    cropAreaStyle?: React.CSSProperties\n  }\n  classes: {\n    containerClassName?: string\n    mediaClassName?: string\n    cropAreaClassName?: string\n  }\n  restrictPosition: boolean\n  mediaProps: React.ImgHTMLAttributes<HTMLElement> | React.VideoHTMLAttributes<HTMLElement>\n  disableAutomaticStylesInjection?: boolean\n  initialCroppedAreaPixels?: Area\n  initialCroppedAreaPercentages?: Area\n  onTouchRequest?: (e: React.TouchEvent<HTMLDivElement>) => boolean\n  onWheelRequest?: (e: WheelEvent) => boolean\n  setImageRef?: (ref: React.RefObject<HTMLImageElement>) => void\n  setVideoRef?: (ref: React.RefObject<HTMLVideoElement>) => void\n  setMediaSize?: (size: MediaSize) => void\n  setCropSize?: (size: Size) => void\n  nonce?: string\n}\n\ntype State = {\n  cropSize: Size | null\n  hasWheelJustStarted: boolean\n}\n\nconst MIN_ZOOM = 1\nconst MAX_ZOOM = 3\n\ntype GestureEvent = UIEvent & {\n  rotation: number\n  scale: number\n  clientX: number\n  clientY: number\n}\n\nclass Cropper extends React.Component<CropperProps, State> {\n  static defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect' as const,\n    objectFit: 'contain' as const,\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true,\n  }\n\n  imageRef: React.RefObject<HTMLImageElement> = React.createRef()\n  videoRef: React.RefObject<HTMLVideoElement> = React.createRef()\n  containerRef: HTMLDivElement | null = null\n  styleRef: HTMLStyleElement | null = null\n  containerRect: DOMRect | null = null\n  mediaSize: MediaSize = { width: 0, height: 0, naturalWidth: 0, naturalHeight: 0 }\n  dragStartPosition: Point = { x: 0, y: 0 }\n  dragStartCrop: Point = { x: 0, y: 0 }\n  gestureZoomStart = 0\n  gestureRotationStart = 0\n  isTouching = false\n  lastPinchDistance = 0\n  lastPinchRotation = 0\n  rafDragTimeout: number | null = null\n  rafPinchTimeout: number | null = null\n  wheelTimer: number | null = null\n  currentDoc: Document = document\n  currentWindow: Window = window\n\n  state: State = {\n    cropSize: null,\n    hasWheelJustStarted: false,\n  }\n\n  componentDidMount() {\n    if (this.containerRef) {\n      if (this.containerRef.ownerDocument) {\n        this.currentDoc = this.containerRef.ownerDocument\n      }\n      if (this.currentDoc.defaultView) {\n        this.currentWindow = this.currentDoc.defaultView\n      }\n      this.currentWindow.addEventListener('resize', this.computeSizes)\n      this.props.zoomWithScroll &&\n        this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n      this.containerRef.addEventListener('gesturestart', this.onGestureStart as EventListener)\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = this.currentDoc.createElement('style')\n      this.styleRef.setAttribute('type', 'text/css')\n      if (this.props.nonce) {\n        this.styleRef.setAttribute('nonce', this.props.nonce)\n      }\n      this.styleRef.innerHTML = cssStyles\n      this.currentDoc.head.appendChild(this.styleRef)\n    }\n\n    // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n    if (this.imageRef.current && this.imageRef.current.complete) {\n      this.onMediaLoad()\n    }\n\n    // set image and video refs in the parent if the callbacks exist\n    if (this.props.setImageRef) {\n      this.props.setImageRef(this.imageRef)\n    }\n\n    if (this.props.setVideoRef) {\n      this.props.setVideoRef(this.videoRef)\n    }\n  }\n\n  componentWillUnmount() {\n    this.currentWindow.removeEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari)\n    }\n\n    if (this.styleRef) {\n      this.styleRef.parentNode?.removeChild(this.styleRef)\n    }\n\n    this.cleanEvents()\n    this.props.zoomWithScroll && this.clearScrollEvent()\n  }\n\n  componentDidUpdate(prevProps: CropperProps) {\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes()\n      this.recomputeCropPosition()\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes()\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition()\n    } else if (\n      prevProps.cropSize?.height !== this.props.cropSize?.height ||\n      prevProps.cropSize?.width !== this.props.cropSize?.width\n    ) {\n      this.computeSizes()\n    } else if (\n      prevProps.crop?.x !== this.props.crop?.x ||\n      prevProps.crop?.y !== this.props.crop?.y\n    ) {\n      this.emitCropAreaChange()\n    }\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll\n        ? this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n        : this.clearScrollEvent()\n    }\n    if (prevProps.video !== this.props.video) {\n      this.videoRef.current?.load()\n    }\n  }\n\n  // this is to prevent Safari on iOS >= 10 to zoom the page\n  preventZoomSafari = (e: Event) => e.preventDefault()\n\n  cleanEvents = () => {\n    this.currentDoc.removeEventListener('mousemove', this.onMouseMove)\n    this.currentDoc.removeEventListener('mouseup', this.onDragStopped)\n    this.currentDoc.removeEventListener('touchmove', this.onTouchMove)\n    this.currentDoc.removeEventListener('touchend', this.onDragStopped)\n    this.currentDoc.removeEventListener('gesturemove', this.onGestureMove as EventListener)\n    this.currentDoc.removeEventListener('gestureend', this.onGestureEnd as EventListener)\n  }\n\n  clearScrollEvent = () => {\n    if (this.containerRef) this.containerRef.removeEventListener('wheel', this.onWheel)\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n  }\n\n  onMediaLoad = () => {\n    const cropSize = this.computeSizes()\n\n    if (cropSize) {\n      this.emitCropData()\n      this.setInitialCrop(cropSize)\n    }\n\n    if (this.props.onMediaLoaded) {\n      this.props.onMediaLoaded(this.mediaSize)\n    }\n  }\n\n  setInitialCrop = (cropSize: Size) => {\n    if (this.props.initialCroppedAreaPercentages) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPercentages(\n        this.props.initialCroppedAreaPercentages,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    } else if (this.props.initialCroppedAreaPixels) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPixels(\n        this.props.initialCroppedAreaPixels,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    }\n  }\n\n  getAspect() {\n    const { cropSize, aspect } = this.props\n    if (cropSize) {\n      return cropSize.width / cropSize.height\n    }\n    return aspect\n  }\n\n  computeSizes = () => {\n    const mediaRef = this.imageRef.current || this.videoRef.current\n\n    if (mediaRef && this.containerRef) {\n      this.containerRect = this.containerRef.getBoundingClientRect()\n      const containerAspect = this.containerRect.width / this.containerRect.height\n      const naturalWidth =\n        this.imageRef.current?.naturalWidth || this.videoRef.current?.videoWidth || 0\n      const naturalHeight =\n        this.imageRef.current?.naturalHeight || this.videoRef.current?.videoHeight || 0\n      const isMediaScaledDown =\n        mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight\n      const mediaAspect = naturalWidth / naturalHeight\n\n      // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n      // as the values they report are rounded. That will result in precision losses\n      // when calculating zoom. We use the fact that the media is positionned relative\n      // to the container. That allows us to use the container's dimensions\n      // and natural aspect ratio of the media to calculate accurate media size.\n      // However, for this to work, the container should not be rotated\n      let renderedMediaSize: Size\n\n      if (isMediaScaledDown) {\n        switch (this.props.objectFit) {\n          default:\n          case 'contain':\n            renderedMediaSize =\n              containerAspect > mediaAspect\n                ? {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n                : {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n            break\n          case 'horizontal-cover':\n            renderedMediaSize = {\n              width: this.containerRect.width,\n              height: this.containerRect.width / mediaAspect,\n            }\n            break\n          case 'vertical-cover':\n            renderedMediaSize = {\n              width: this.containerRect.height * mediaAspect,\n              height: this.containerRect.height,\n            }\n            break\n          case 'auto-cover':\n            renderedMediaSize =\n              naturalWidth > naturalHeight\n                ? {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n                : {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n            break\n        }\n      } else {\n        renderedMediaSize = {\n          width: mediaRef.offsetWidth,\n          height: mediaRef.offsetHeight,\n        }\n      }\n\n      this.mediaSize = {\n        ...renderedMediaSize,\n        naturalWidth,\n        naturalHeight,\n      }\n\n      // set media size in the parent\n      if (this.props.setMediaSize) {\n        this.props.setMediaSize(this.mediaSize)\n      }\n\n      const cropSize = this.props.cropSize\n        ? this.props.cropSize\n        : getCropSize(\n            this.mediaSize.width,\n            this.mediaSize.height,\n            this.containerRect.width,\n            this.containerRect.height,\n            this.props.aspect,\n            this.props.rotation\n          )\n\n      if (\n        this.state.cropSize?.height !== cropSize.height ||\n        this.state.cropSize?.width !== cropSize.width\n      ) {\n        this.props.onCropSizeChange && this.props.onCropSizeChange(cropSize)\n      }\n      this.setState({ cropSize }, this.recomputeCropPosition)\n      // pass crop size to parent\n      if (this.props.setCropSize) {\n        this.props.setCropSize(cropSize)\n      }\n\n      return cropSize\n    }\n  }\n\n  static getMousePoint = (e: MouseEvent | React.MouseEvent | GestureEvent) => ({\n    x: Number(e.clientX),\n    y: Number(e.clientY),\n  })\n\n  static getTouchPoint = (touch: Touch | React.Touch) => ({\n    x: Number(touch.clientX),\n    y: Number(touch.clientY),\n  })\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault()\n    this.currentDoc.addEventListener('mousemove', this.onMouseMove)\n    this.currentDoc.addEventListener('mouseup', this.onDragStopped)\n    this.onDragStart(Cropper.getMousePoint(e))\n  }\n\n  onMouseMove = (e: MouseEvent) => this.onDrag(Cropper.getMousePoint(e))\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    this.isTouching = true\n    if (this.props.onTouchRequest && !this.props.onTouchRequest(e)) {\n      return\n    }\n\n    this.currentDoc.addEventListener('touchmove', this.onTouchMove, { passive: false }) // iOS 11 now defaults to passive: true\n    this.currentDoc.addEventListener('touchend', this.onDragStopped)\n\n    if (e.touches.length === 2) {\n      this.onPinchStart(e)\n    } else if (e.touches.length === 1) {\n      this.onDragStart(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onTouchMove = (e: TouchEvent) => {\n    // Prevent whole page from scrolling on iOS.\n    e.preventDefault()\n    if (e.touches.length === 2) {\n      this.onPinchMove(e)\n    } else if (e.touches.length === 1) {\n      this.onDrag(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onGestureStart = (e: GestureEvent) => {\n    e.preventDefault()\n    this.currentDoc.addEventListener('gesturechange', this.onGestureMove as EventListener)\n    this.currentDoc.addEventListener('gestureend', this.onGestureEnd as EventListener)\n    this.gestureZoomStart = this.props.zoom\n    this.gestureRotationStart = this.props.rotation\n  }\n\n  onGestureMove = (e: GestureEvent) => {\n    e.preventDefault()\n    if (this.isTouching) {\n      // this is to avoid conflict between gesture and touch events\n      return\n    }\n\n    const point = Cropper.getMousePoint(e)\n    const newZoom = this.gestureZoomStart - 1 + e.scale\n    this.setNewZoom(newZoom, point, { shouldUpdatePosition: true })\n    if (this.props.onRotationChange) {\n      const newRotation = this.gestureRotationStart + e.rotation\n      this.props.onRotationChange(newRotation)\n    }\n  }\n\n  onGestureEnd = (e: GestureEvent) => {\n    this.cleanEvents()\n  }\n\n  onDragStart = ({ x, y }: Point) => {\n    this.dragStartPosition = { x, y }\n    this.dragStartCrop = { ...this.props.crop }\n    this.props.onInteractionStart?.()\n  }\n\n  onDrag = ({ x, y }: Point) => {\n    if (this.rafDragTimeout) this.currentWindow.cancelAnimationFrame(this.rafDragTimeout)\n\n    this.rafDragTimeout = this.currentWindow.requestAnimationFrame(() => {\n      if (!this.state.cropSize) return\n      if (x === undefined || y === undefined) return\n      const offsetX = x - this.dragStartPosition.x\n      const offsetY = y - this.dragStartPosition.y\n      const requestedPosition = {\n        x: this.dragStartCrop.x + offsetX,\n        y: this.dragStartCrop.y + offsetY,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            this.props.zoom,\n            this.props.rotation\n          )\n        : requestedPosition\n      this.props.onCropChange(newPosition)\n    })\n  }\n\n  onDragStopped = () => {\n    this.isTouching = false\n    this.cleanEvents()\n    this.emitCropData()\n    this.props.onInteractionEnd?.()\n  }\n\n  onPinchStart(e: React.TouchEvent<HTMLDivElement>) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB)\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB)\n    this.onDragStart(getCenter(pointA, pointB))\n  }\n\n  onPinchMove(e: TouchEvent) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    const center = getCenter(pointA, pointB)\n    this.onDrag(center)\n\n    if (this.rafPinchTimeout) this.currentWindow.cancelAnimationFrame(this.rafPinchTimeout)\n    this.rafPinchTimeout = this.currentWindow.requestAnimationFrame(() => {\n      const distance = getDistanceBetweenPoints(pointA, pointB)\n      const newZoom = this.props.zoom * (distance / this.lastPinchDistance)\n      this.setNewZoom(newZoom, center, { shouldUpdatePosition: false })\n      this.lastPinchDistance = distance\n\n      const rotation = getRotationBetweenPoints(pointA, pointB)\n      const newRotation = this.props.rotation + (rotation - this.lastPinchRotation)\n      this.props.onRotationChange && this.props.onRotationChange(newRotation)\n      this.lastPinchRotation = rotation\n    })\n  }\n\n  onWheel = (e: WheelEvent) => {\n    if (this.props.onWheelRequest && !this.props.onWheelRequest(e)) {\n      return\n    }\n\n    e.preventDefault()\n    const point = Cropper.getMousePoint(e)\n    const { pixelY } = normalizeWheel(e)\n    const newZoom = this.props.zoom - (pixelY * this.props.zoomSpeed) / 200\n    this.setNewZoom(newZoom, point, { shouldUpdatePosition: true })\n\n    if (!this.state.hasWheelJustStarted) {\n      this.setState({ hasWheelJustStarted: true }, () => this.props.onInteractionStart?.())\n    }\n\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n    this.wheelTimer = this.currentWindow.setTimeout(\n      () => this.setState({ hasWheelJustStarted: false }, () => this.props.onInteractionEnd?.()),\n      250\n    )\n  }\n\n  getPointOnContainer = ({ x, y }: Point) => {\n    if (!this.containerRect) {\n      throw new Error('The Cropper is not mounted')\n    }\n    return {\n      x: this.containerRect.width / 2 - (x - this.containerRect.left),\n      y: this.containerRect.height / 2 - (y - this.containerRect.top),\n    }\n  }\n\n  getPointOnMedia = ({ x, y }: Point) => {\n    const { crop, zoom } = this.props\n    return {\n      x: (x + crop.x) / zoom,\n      y: (y + crop.y) / zoom,\n    }\n  }\n\n  setNewZoom = (zoom: number, point: Point, { shouldUpdatePosition = true } = {}) => {\n    if (!this.state.cropSize || !this.props.onZoomChange) return\n\n    const newZoom = clamp(zoom, this.props.minZoom, this.props.maxZoom)\n\n    if (shouldUpdatePosition) {\n      const zoomPoint = this.getPointOnContainer(point)\n      const zoomTarget = this.getPointOnMedia(zoomPoint)\n      const requestedPosition = {\n        x: zoomTarget.x * newZoom - zoomPoint.x,\n        y: zoomTarget.y * newZoom - zoomPoint.y,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            newZoom,\n            this.props.rotation\n          )\n        : requestedPosition\n\n      this.props.onCropChange(newPosition)\n    }\n    this.props.onZoomChange(newZoom)\n  }\n\n  getCropData = () => {\n    if (!this.state.cropSize) {\n      return null\n    }\n\n    // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ValentinH/react-easy-crop/issues/6)\n    const restrictedPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    return computeCroppedArea(\n      restrictedPosition,\n      this.mediaSize,\n      this.state.cropSize,\n      this.getAspect(),\n      this.props.zoom,\n      this.props.rotation,\n      this.props.restrictPosition\n    )\n  }\n\n  emitCropData = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropComplete) {\n      this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels)\n    }\n\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  emitCropAreaChange = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  recomputeCropPosition = () => {\n    if (!this.state.cropSize) return\n\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n\n    this.props.onCropChange(newPosition)\n    this.emitCropData()\n  }\n\n  render() {\n    const {\n      image,\n      video,\n      mediaProps,\n      transform,\n      crop: { x, y },\n      rotation,\n      zoom,\n      cropShape,\n      showGrid,\n      style: { containerStyle, cropAreaStyle, mediaStyle },\n      classes: { containerClassName, cropAreaClassName, mediaClassName },\n      objectFit,\n    } = this.props\n\n    return (\n      <div\n        onMouseDown={this.onMouseDown}\n        onTouchStart={this.onTouchStart}\n        ref={(el) => (this.containerRef = el)}\n        data-testid=\"container\"\n        style={containerStyle}\n        className={classNames('reactEasyCrop_Container', containerClassName)}\n      >\n        {image ? (\n          <img\n            alt=\"\"\n            className={classNames(\n              'reactEasyCrop_Image',\n              objectFit === 'contain' && 'reactEasyCrop_Contain',\n              objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n              objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n              objectFit === 'auto-cover' &&\n                (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight\n                  ? 'reactEasyCrop_Cover_Horizontal'\n                  : 'reactEasyCrop_Cover_Vertical'),\n              mediaClassName\n            )}\n            {...(mediaProps as React.ImgHTMLAttributes<HTMLElement>)}\n            src={image}\n            ref={this.imageRef}\n            style={{\n              ...mediaStyle,\n              transform:\n                transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n            }}\n            onLoad={this.onMediaLoad}\n          />\n        ) : (\n          video && (\n            <video\n              autoPlay\n              loop\n              muted={true}\n              className={classNames(\n                'reactEasyCrop_Video',\n                objectFit === 'contain' && 'reactEasyCrop_Contain',\n                objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n                objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n                objectFit === 'auto-cover' &&\n                  (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight\n                    ? 'reactEasyCrop_Cover_Horizontal'\n                    : 'reactEasyCrop_Cover_Vertical'),\n                mediaClassName\n              )}\n              {...mediaProps}\n              ref={this.videoRef}\n              onLoadedMetadata={this.onMediaLoad}\n              style={{\n                ...mediaStyle,\n                transform:\n                  transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n              }}\n              controls={false}\n            >\n              {(Array.isArray(video) ? video : [{ src: video }]).map((item) => (\n                <source key={item.src} {...item} />\n              ))}\n            </video>\n          )\n        )}\n        {this.state.cropSize && (\n          <div\n            style={{\n              ...cropAreaStyle,\n              width: this.state.cropSize.width,\n              height: this.state.cropSize.height,\n            }}\n            data-testid=\"cropper\"\n            className={classNames(\n              'reactEasyCrop_CropArea',\n              cropShape === 'round' && 'reactEasyCrop_CropAreaRound',\n              showGrid && 'reactEasyCrop_CropAreaGrid',\n              cropAreaClassName\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Cropper\n"],"names":["getCropSize","mediaWidth","mediaHeight","containerWidth","containerHeight","aspect","rotation","_a","rotateSize","width","height","fittingWidth","Math","min","fittingHeight","restrictPosition","position","mediaSize","cropSize","zoom","x","restrictPositionCoord","y","maxPosition","clamp","getDistanceBetweenPoints","pointA","pointB","sqrt","pow","getRotationBetweenPoints","atan2","PI","computeCroppedArea","crop","limitAreaFn","limitArea","noOp","mediaBBoxSize","mediaNaturalBBoxSize","naturalWidth","naturalHeight","croppedAreaPercentages","widthInPixels","round","heightInPixels","sizePixels","croppedAreaPixels","max","value","_max","getInitialCropFromCroppedAreaPercentages","minZoom","maxZoom","getInitialCropFromCroppedAreaPixels","mediaZoom","getMediaZoom","getZoomFromCroppedAreaPixels","cropZoom","getCenter","a","b","rotRad","abs","cos","sin","classNames","_i","args","filter","length","join","trim","_this","React","createRef","document","window","hasWheelJustStarted","e","preventDefault","currentDoc","removeEventListener","onMouseMove","onDragStopped","onTouchMove","onGestureMove","onGestureEnd","containerRef","onWheel","wheelTimer","clearTimeout","computeSizes","emitCropData","setInitialCrop","props","onMediaLoaded","initialCroppedAreaPercentages","onCropChange","onZoomChange","initialCroppedAreaPixels","_b","mediaRef","imageRef","current","videoRef","containerRect","getBoundingClientRect","containerAspect","videoWidth","videoHeight","mediaAspect","renderedMediaSize","offsetWidth","offsetHeight","objectFit","setMediaSize","state","onCropSizeChange","setState","recomputeCropPosition","setCropSize","addEventListener","onDragStart","Cropper","getMousePoint","onDrag","isTouching","onTouchRequest","passive","touches","onPinchStart","getTouchPoint","onPinchMove","gestureZoomStart","gestureRotationStart","point","newZoom","scale","setNewZoom","shouldUpdatePosition","onRotationChange","newRotation","cleanEvents","dragStartPosition","dragStartCrop","onInteractionStart","rafDragTimeout","currentWindow","cancelAnimationFrame","requestAnimationFrame","undefined","offsetX","offsetY","requestedPosition","newPosition","onInteractionEnd","onWheelRequest","pixelY","normalizeWheel","zoomSpeed","setTimeout","Error","left","top","zoomPoint","getPointOnContainer","zoomTarget","getPointOnMedia","getAspect","cropData","getCropData","onCropComplete","onCropAreaChange","__extends","this","ownerDocument","defaultView","zoomWithScroll","onGestureStart","disableAutomaticStylesInjection","styleRef","createElement","setAttribute","nonce","innerHTML","head","appendChild","complete","onMediaLoad","setImageRef","setVideoRef","preventZoomSafari","parentNode","removeChild","clearScrollEvent","prevProps","emitCropAreaChange","video","load","lastPinchDistance","lastPinchRotation","center","rafPinchTimeout","distance","image","mediaProps","transform","cropShape","showGrid","_c","containerStyle","cropAreaStyle","mediaStyle","_d","containerClassName","cropAreaClassName","mediaClassName","onMouseDown","onTouchStart","ref","el","style","className","alt","src","onLoad","autoPlay","loop","muted","onLoadedMetadata","controls","Array","isArray","map","item","key","classes","Number","clientX","clientY","touch","Component"],"mappings":"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"}